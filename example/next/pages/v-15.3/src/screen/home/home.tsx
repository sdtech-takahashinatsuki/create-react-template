import Head from "next/head";
import { Geist, Geist_Mono } from "next/font/google";
import { Heading } from "@/components/ui";
import { ja } from "@/shared/lang/ja";
import { PopupOpenButton } from "@/components/ui/popup/popup-open-button/popup-open-button";
import { ExplainPopup } from "@/features/about";
import homeStyles from "./home.css";
import Link from "next/link";

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"]
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"]
});

function HomeScreen() {
    return (
        <>
            <Head>
                <title>Pages router template v15.3</title>
                <meta name="description" content="Generated by pages" />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={`${geistSans.variable} ${geistMono.variable}`}>
                <main>
                    <Heading>{ja.app.home.title}</Heading>

                    <PopupOpenButton
                        popupChildren={<ExplainPopup />}
                        className={homeStyles.button}
                    >
                        {ja.app.home.openPopup}
                    </PopupOpenButton>

                    <div>
                        <Link href="/server-side-render">
                            {ja.app.home.toServerSideRender}
                        </Link>
                        <br />
                        <Link href="/single-dynamic-potter">
                            {ja.app.home.toSingleDynamicPotter}
                        </Link>

                        <br />
                        <Link href="/static-generator">
                            {ja.app.home.toStaticPotter}
                        </Link>
                    </div>
                </main>
            </main>
        </>
    );
}

export default HomeScreen;
